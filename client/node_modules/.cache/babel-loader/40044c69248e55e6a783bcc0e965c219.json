{"ast":null,"code":"//takeEvery listens to evey action passed to it\nimport { takeEvery, call, put, all } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"I am fired\");\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} //takeEvery creates non blocking call\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["D:/React Projects/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","all","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,oBAA1C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AACA,MAAI;AAEA,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMf,IAAI,CAACK,+BAAD,EAAiCQ,QAAjC,CAAjC;AACA,UAAMZ,GAAG,CAACK,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACH,GAND,CAME,OAAMC,KAAN,EAAa;AACX,UAAMf,GAAG,CAACM,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AAEJ,C,CAED;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMnB,SAAS,CACXI,eAAe,CAACgB,uBADL,EAEXX,qBAFW,CAAf;AAIH;AAED,OAAO,UAAUY,SAAV,GAAsB;AACzB,QAAMlB,GAAG,CAAC,CACNF,IAAI,CAACkB,qBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["//takeEvery listens to evey action passed to it\r\nimport { takeEvery, call, put, all } from 'redux-saga/effects';\r\nimport ShopActionTypes from './shop.types';\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n    yield console.log(\"I am fired\");\r\n    try {\r\n\r\n        const collectionRef = firestore.collection('collections');\r\n        const snapshot = yield collectionRef.get();\r\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap,snapshot);\r\n        yield put(fetchCollectionsSuccess(collectionsMap));\r\n    } catch(error) {\r\n        yield put(fetchCollectionsFailure(error.message));\r\n    }\r\n\r\n}\r\n\r\n//takeEvery creates non blocking call\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync\r\n    );\r\n}\r\n\r\nexport function* shopSagas() {\r\n    yield all([\r\n        call(fetchCollectionsStart)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}