{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n  } catch (error) {}\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}\n;","map":{"version":3,"sources":["D:/React Projects/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","userActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signUp","payload","email","password","displayName","user","createUserWithEmailAndPassword","signOut","signInWithGoogle","signInWithPopup","signInWithEmail","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","isUserAuthenticated","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport userActionTypes from './user.types';\r\n\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument,userAuth);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(\r\n            signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()})\r\n        );\r\n    } catch(error) {\r\n        yield put(\r\n            signInFailure(error)\r\n        );\r\n    }\r\n}\r\n\r\nexport function* signUp({payload: {email, password, displayName}}) {\r\n    try {\r\n        const {user} = yield auth.createUserWithEmailAndPassword(\r\n            email,\r\n            password\r\n        )\r\n    }catch(error) {\r\n\r\n    }\r\n}\r\n\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    } catch(error) {\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n\r\n    } catch (error) {\r\n        yield put(\r\n            signInFailure(error)\r\n        );\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password}}) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email,password);\r\n        yield getSnapshotFromUserAuth(user);\r\n\r\n    } catch(error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(userActionTypes.SIGN_OUT_START, signOut)\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    } catch(error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart)\r\n    ])\r\n};\r\n"]},"metadata":{},"sourceType":"module"}